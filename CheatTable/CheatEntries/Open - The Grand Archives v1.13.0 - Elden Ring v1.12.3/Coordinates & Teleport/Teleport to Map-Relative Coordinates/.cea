{ Teleport to map-relative coordinates - by tremwil (minusone12)
  Credits: Pav for map-relative coords and local coords pointers
}
{$lua}
if syntaxcheck then return end
[ENABLE]

function getMapRelativeCoords(addr)
    local pos = {
        x = readFloat(addr or "[[[WorldChrMan]+10EF8]+0]+6C0"),
        y = readFloat(addr and (addr .. "+4") or "[[[WorldChrMan]+10EF8]+0]+6C4"),
        z = readFloat(addr and (addr .. "+8") or "[[[WorldChrMan]+10EF8]+0]+6C8"),
        rad = readFloat(addr and (addr .. "+C") or "[[[WorldChrMan]+10EF8]+0]+6CC"),
        map = readInteger(addr and (addr .. "+10") or "[[[WorldChrMan]+10EF8]+0]+6D0")
    }
    if (pos.x == nil) then return nil else return pos end
end

function getLocalCoords()
    local pos = {
        x = readFloat("[[[[[WorldChrMan]+10EF8]+0]+190]+68]+70"),
        y = readFloat("[[[[[WorldChrMan]+10EF8]+0]+190]+68]+74"),
        z = readFloat("[[[[[WorldChrMan]+10EF8]+0]+190]+68]+78")
    }
    if (pos.x == nil) then return nil else return pos end
end

function setLocalCoords(pos)
    writeFloat("[[[[[WorldChrMan]+10EF8]+0]+190]+68]+70", pos.x)
    writeFloat("[[[[[WorldChrMan]+10EF8]+0]+190]+68]+74", pos.y)
    writeFloat("[[[[[WorldChrMan]+10EF8]+0]+190]+68]+78", pos.z)
end

function getMapInfo(map)
    return {
        id = (map >> 24) & 0xff,
        gridXNo = (map >> 16) & 0xff,
        gridZNo = (map >> 8) & 0xff
    }
end

-- Thank god for the ER paramdef leaker, would not have found this
-- out otherwise
function readWorldMapLegacyConvParam(addr)
    return {
        srcAreaNo  =  readByte(addr + 0x04),
        srcGridXNo =  readByte(addr + 0x05),
        srcGridZNo =  readByte(addr + 0x06),
        srcPosX    = readFloat(addr + 0x08),
        srcPosY    = readFloat(addr + 0x0C),
        srcPosZ    = readFloat(addr + 0x10),
        dstAreaNo  =  readByte(addr + 0x14),
        dstGridXNo =  readByte(addr + 0x15),
        dstGridZNo =  readByte(addr + 0x16),
        dstPosX    = readFloat(addr + 0x18),
        dstPosY    = readFloat(addr + 0x1C),
        dstPosZ    = readFloat(addr + 0x20)
    }
end

function getAbsoluteCoords(mapRelPos)
    local minfo = getMapInfo(mapRelPos.map)
     -- 3C = open world map, divided in 256x256 chunks.
    if (minfo.id == 0x3C) then
        return {
            x = mapRelPos.x + 256 * minfo.gridXNo,
            y = mapRelPos.y,
            z = mapRelPos.z + 256 * minfo.gridZNo
        }
    end
    -- Otherwise, search for ConvParam that maps our legacy dungeon map to the open world map
    local worldMapLegacyConv = paramUtils:getParamIdTable("WorldMapLegacyConvParam")
    for id, addr in pairs(worldMapLegacyConv) do
        local mapConv = readWorldMapLegacyConvParam(addr)
        if (mapConv.srcAreaNo == minfo.id and
            mapConv.dstAreaNo == 0x3C and
            mapConv.srcGridXNo == minfo.gridXNo and -- These aren't really grid coords,  more like dungeon number for the same type
            mapConv.srcGridZNo == minfo.gridZNo) then
            -- Perform conversion to open world coords by rebasing to open world map origin
            -- and adding the map chunk coords offset
            return {
                x = mapRelPos.x + mapConv.dstPosX - mapConv.srcPosX + mapConv.dstGridXNo * 256,
                y = mapRelPos.y + mapConv.dstPosY - mapConv.srcPosY,
                z = mapRelPos.z + mapConv.dstPosZ - mapConv.srcPosZ + mapConv.dstGridZNo * 256
            }
        end
    end
    return nil
end

function mapRelativeTeleport(tgtPos)
    local currPos = getMapRelativeCoords(nil)
    if (currPos == nil) then return end

    local currAbsPos = currPos;
    local tgtAbsPos = tgtPos;

    if (tgtPos.map ~= currPos.map) then
        currAbsPos = getAbsoluteCoords(currPos)
        if (currAbsPos == nil) then
            print("Map relative TP error: No suitable WorldMapLegacyConvParam found for current map")
            return
        end
        tgtAbsPos = getAbsoluteCoords(tgtPos)
        if (tgtAbsPos == nil) then
            print("Map relative TP error: No suitable WorldMapLegacyConvParam found for target map")
            return
        end
    end

    local pos = getLocalCoords()
    pos.x = pos.x + tgtAbsPos.x - currAbsPos.x
    pos.y = pos.y + tgtAbsPos.y - currAbsPos.y
    pos.z = pos.z + tgtAbsPos.z - currAbsPos.z
    setLocalCoords(pos)
end

autoAssemble([[
alloc(TargetCoords, 20, $process)
registersymbol(TargetCoords)
]])

[DISABLE]
autoAssemble([[
dealloc(TargetCoords)
unregistersymbol(TargetCoords)
]])
