[ENABLE]
{$lua}
if syntaxcheck then return end
--[[START BonfireWarpParam class]]--
BonfireWarpParam = BaseParamClass:new()

function BonfireWarpParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("BonfireWarpParam", uuid, id, address)
	return o
end

function BonfireWarpParam:LocationEventId(value)
    self:patch4Byte(0x0,value)
end

function BonfireWarpParam:WarpEventId(value)
    self:patch4Byte(0x4,value)
end

function BonfireWarpParam:BonfireNameId(value)
    self:patch4Byte(0x8,value)
end

function BonfireWarpParam:DescriptionTextId(value)
    self:patch4Byte(0xC,value)
end

function BonfireWarpParam:PictureId(value)
    self:patch4Byte(0x10,value)
end

function BonfireWarpParam:ListId(value)
    self:patchByte(0x14,value)
end

function BonfireWarpParam:IsDisableQuickwarp(value)
    self:patchByte(0x15,value)
end

function BonfireWarpParam:CeremonyId(value)
    self:patch2Byte(0x16,value)
end

function BonfireWarpParam:onlineAreaId(value)
    self:patch4Byte(0x18,value)
end


--Compatibility
function BonfireWarpParam:LocationID(value)
    self:patch4Byte(0x0, value)
end

function BonfireWarpParam:WarpID(value)
    self:patch4Byte(0x4, value)
end

function BonfireWarpParam:BonfireId(value)
    self:patch4Byte(0x8,value)
end

function BonfireWarpParam:NameID(value)
    self:patch4Byte(0x8, value)
end

function BonfireWarpParam:PictureID(value)
    self:patch4Byte(0x10, value)
end

function BonfireWarpParam:SectionID(value)
    self:patchByte(0x14, value)
end

[DISABLE]
