[ENABLE]
{$lua}
if syntaxcheck then return end

ShopLineupParam = BaseParamClass:new()

function ShopLineupParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("ShopLineupParam", uuid, id, address)
	return o
end

function ShopLineupParam:EquipId(value)
    self:patch4Byte(0x0,value)
end

function ShopLineupParam:Value(value)
    self:patch4Byte(0x4,value)
end

function ShopLineupParam:MtrlId(value)
    self:patch4Byte(0x8,value)
end

function ShopLineupParam:EventFlag(value)
    self:patch4Byte(0xC,value)
end

function ShopLineupParam:qwcID(value)
    self:patch4Byte(0x10,value)
end

function ShopLineupParam:SellQuantity(value)
    self:patch2Byte(0x14,value)
end

function ShopLineupParam:ShopType(value)
    self:patchByte(0x16,value)
end

function ShopLineupParam:EquipType(value)
    self:patchByte(0x17,value)
end

function ShopLineupParam:Durability(value)
    self:patch2Byte(0x18,value)
end

function ShopLineupParam:Unknown(value)
    self:patch4Byte(0x1C,value)
end

function ShopLineupParam:PriceRate(value)
    self:patchFloat(0x20,value)
end


--Compatibility
function ShopLineupParam:ItemId(value)
    self:patch4Byte(0x0,value)
end

function ShopLineupParam:Price(value)
    self:patch2Byte(0x4,value)
end

function ShopLineupParam:ModelId(value)
    self:patch2Byte(0x10,value)
end

function ShopLineupParam:Amount(value)
    self:patch2Byte(0x14,value)
end

function ShopLineupParam:Category(value)
    self:patchByte(0x17,value)
end

function ShopLineupParam:Soul(value)
    self:patch4Byte(0x10,value)
end

function ShopLineupParam:ValueCorrection(value)
    self:patchFloat(0x20,value)
end

function ShopLineupParam:CostMultiplier(value)
    self:patchFloat(0x20,value)
end

[DISABLE]
{$lua}
if syntaxcheck then return end
